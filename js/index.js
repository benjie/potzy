// Generated by CoffeeScript 1.7.1
(function () {
  var $,
    bufferSize,
    context,
    formatValue,
    node,
    potzy,
    premade,
    sampleDuration,
    sampleRate,
    t,
    volume,
    ws,
    __bind = function (fn, me) {
      return function () {
        return fn.apply(me, arguments);
      };
    },
    __indexOf =
      [].indexOf ||
      function (item) {
        for (var i = 0, l = this.length; i < l; i++) {
          if (i in this && this[i] === item) return i;
        }
        return -1;
      };

  if (window.potzy == null) {
    context = null;
    node = null;
    sampleRate = null;
    sampleDuration = null;
    t = 2 * 60 * 60;
    volume = 0.1;
    bufferSize = 4096;
    premade = [
      "afternoon walk",
      "early morning",
      "got some 303",
      "icecream",
      "late morning",
      "mind swift",
      "morning",
      "need more 303",
      "on the verge",
      "on the verge tech mix",
      "polytropon",
      "polytropon astral mix",
      "pwm and stuff",
      "saints",
      "simple sine",
      "subwah",
      "unexpected token",
      "yay",
    ];
    $ = function (id) {
      return document.getElementById(id);
    };
    window.potzy = potzy = new ((function () {
      function _Class() {
        this.mouseWheel = __bind(this.mouseWheel, this);
        this.updateValueStatusBar = __bind(this.updateValueStatusBar, this);
        this.pause = __bind(this.pause, this);
        this.play = __bind(this.play, this);
        this["import"] = __bind(this["import"], this);
        this.init = __bind(this.init, this);
        this.readyCallbacks = [];
        this.state = {};
        this._state = {};
        this.setState({
          L0: 0.5,
          P0: 0.5,
          P1: 0.5,
          P2: 0.5,
          P3: 0.5,
          P4: 0.5,
          TIME: 1,
          VOL: 0.3,
          C6: 1,
        });
      }

      _Class.prototype.smooth = function (newVal, oldVal) {
        var oldRatio;
        if (oldVal == null) {
          return newVal;
        }
        oldRatio = 1;
        newVal = (oldRatio * oldVal + newVal) / (1 + oldRatio);
        if (!(Math.abs(oldVal - newVal) >= 0.01)) {
          return oldVal;
        }
        return newVal;
      };

      _Class.prototype.superSmooth = function (newVal, oldVal) {
        if (oldVal == null) {
          return newVal;
        }
        if (!(Math.abs(oldVal - newVal) >= 0.02)) {
          return oldVal;
        }
        return parseFloat(newVal.toFixed(2));
      };

      _Class.prototype.setState = function (state) {
        var k, v;
        for (k in state) {
          v = state[k];
          if (k === "TIME") {
            this._state[k] = this.state[k] = this.superSmooth(v, this.state[k]);
          } else if (k[0] !== "C") {
            this._state[k] = this.state[k] = this.smooth(v, this.state[k]);
          } else {
            this._state[k] = this.state[k] = v;
          }
        }
        if (this._state.VOL != null) {
          volume = Math.min(1, Math.max(0, parseFloat(this._state.VOL)));
        }
      };

      _Class.prototype.init = function () {
        window.removeEventListener("click", window.potzy.init, false);

        var cb, e, file, fp, list, _fn, _i, _j, _len, _len1, _ref;
        this.headingsContainer = document.getElementById("vars-names");
        this.valuesContainer = document.getElementById("vars-values");
        this.headingsContainer.addEventListener(
          "mousewheel",
          this.mouseWheel,
          false
        );
        this.valuesContainer.addEventListener(
          "mousewheel",
          this.mouseWheel,
          false
        );
        fp = $("file-picker");
        list = document.createElement("ul");
        _fn = (function (_this) {
          return function (file) {
            var li;
            li = document.createElement("li");
            li.textContent = file;
            li.onclick = function () {
              return _this.load(file);
            };
            li.ondblclick = function () {
              return _this.load(file, true);
            };
            return list.appendChild(li);
          };
        })(this);
        for (_i = 0, _len = premade.length; _i < _len; _i++) {
          file = premade[_i];
          _fn(file);
        }
        fp.appendChild(list);
        $("play").addEventListener("click", this.play, false);
        $("pause").addEventListener("click", this.pause, false);
        this.editor = CodeMirror(document.getElementById("editor"), {
          mode: "javascript",
          value:
            "function dsp(t) {\n  return Math.sin(2 * Math.PI * t * 440);\n}",
        });
        this.editor.setSize("100%", "100%");
        this.editor.on("change", this["import"]);
        if (localStorage.getItem("_current") != null) {
          this.load(localStorage.getItem("_current"));
        } else {
          this.load("basic");
        }
        this["import"]();
        this.editor.focus();
        this.updateValueStatusBar();
        try {
          if (window.AudioContext == null) {
            window.AudioContext = window.webkitAudioContext;
          }
          context = new AudioContext();
          sampleRate = context.sampleRate;
          sampleDuration = 1 / sampleRate;
          node = context.createScriptProcessor(bufferSize, 1, 1);
          node.loop = false;
          node.onaudioprocess = (function (_this) {
            return function (e) {
              var i, output, _j, _ref, _results;
              output = e.outputBuffer.getChannelData(0);
              _results = [];
              for (
                i = _j = 0, _ref = output.length;
                0 <= _ref ? _j < _ref : _j > _ref;
                i = 0 <= _ref ? ++_j : --_j
              ) {
                t += sampleDuration * _this._state.TIME;
                _results.push((output[i] = volume * _this.fn(t)));
              }
              return _results;
            };
          })(this);
          this.ready = true;
          _ref = this.readyCallbacks;
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            cb = _ref[_j];
            cb();
          }
          return delete this.readyCallbacks;
        } catch (_error) {
          e = _error;
          this.ready = false;
          return alert("Web Audio API is not supported in this browser");
        }
      };

      _Class.prototype.load = function (file, force) {
        var xhr, _ref;
        this.currentFile = file;
        localStorage.setItem("_current", file);
        if (force && confirm("Delete local modifications to '" + file + "'?")) {
          localStorage.removeItem(file);
        }
        if (
          localStorage.getItem(file) == null &&
          __indexOf.call(premade, file) >= 0
        ) {
          xhr = new XMLHttpRequest();
          xhr.onreadystatechange = (function (_this) {
            return function () {
              if (xhr.readyState === 4) {
                _this.editor.setValue(xhr.responseText);
                return _this["import"]();
              }
            };
          })(this);
          xhr.open("GET", "premade/" + file, true);
          return xhr.send(null);
        } else {
          this.editor.setValue(
            (_ref = localStorage.getItem(file)) != null
              ? _ref
              : "function dsp(t) {\n  return Math.sin(2 * Math.PI * t * 440);\n}"
          );
          return this["import"]();
        }
      };

      _Class.prototype["import"] = function () {
        var e, fn, js, messagesContainer, str;
        js = this.editor
          .getValue()
          .replace(/@([A-Za-z0-9]+)/gm, "this.$1", "gm");
        messagesContainer = document.getElementById("messages");
        try {
          str =
            "(function() {\n  var sampleRate = " +
            sampleRate +
            ";\n  var P0 = this.P0;\n  var P1 = this.P1;\n  var P2 = this.P2;\n  var P3 = this.P3;\n  var P4 = this.P4;\n  var L0 = this.L0;\n  " +
            js +
            "\n  return dsp;\n})()";
          fn = eval(str);
          fn.call(this._state, 0);
          fn.call(this._state, 1);
          fn.call(this._state, 100.499);
          messagesContainer.classList.remove("error");
          messagesContainer.innerHTML = "OK!";
          localStorage.setItem(this.currentFile, js);
          return (this._fn = fn);
        } catch (_error) {
          e = _error;
          console.error(e);
          messagesContainer.classList.add("error");
          return (messagesContainer.innerHTML = "Error: " + e.message);
        }
      };

      _Class.prototype.play = function () {
        this["import"]();
        return node.connect(context.destination);
      };

      _Class.prototype.pause = function () {
        return node.disconnect();
      };

      _Class.prototype._fn = function () {
        return 0;
      };

      _Class.prototype.fn = function (t) {
        var e;
        try {
          return this._fn.call(this._state, t);
        } catch (_error) {
          e = _error;
          return 0;
        }
      };

      _Class.prototype.onReady = function (fn) {
        if (this.ready) {
          return setTimeout(fn, 0);
        } else {
          return this.readyCallbacks.push(fn);
        }
      };

      _Class.prototype.updateValueStatusBar = function () {
        var headings, key, value, values, _ref;
        headings = [];
        values = [];
        _ref = this.state;
        for (key in _ref) {
          value = _ref[key];
          headings.push('<th data-key="' + key + '">@' + key + "</th>");
          values.push(
            '<td data-key="' + key + '">' + formatValue(value) + "</td>"
          );
        }
        this.headingsContainer.innerHTML = headings.join("");
        this.valuesContainer.innerHTML = values.join("");
        return window.requestAnimationFrame(this.updateValueStatusBar);
      };

      _Class.prototype.mouseWheel = function (e) {
        var key, obj, v;
        e.preventDefault();
        key = e.target.getAttribute("data-key");
        if (key) {
          v = this.state[key];
          if (v) {
            obj = {};
            obj[key] = parseFloat(v) - e.wheelDelta / 100;
            this.setState(obj);
          }
        }
        return false;
      };

      return _Class;
    })())();
    formatValue = function (input) {
      var roundedStr;
      roundedStr = Math.round(input * 100) / 100 + "";
      return roundedStr + "0.00".substr(roundedStr.length);
    };
    window.addEventListener("click", window.potzy.init, false);
    try {
      ws = new WebSocket("ws://" + window.location.host);
      ws.onmessage = function (e) {
        var state;
        try {
          state = JSON.parse(e.data);
          state.TIME = (state.C6 * 2 - 1) * Math.sqrt(0.25 + state.P4 * 3.75);
          return potzy.setState(state);
        } catch (_error) {}
      };
    } catch (_error) {}
  }
}.call(this));

//# sourceMappingURL=index.map
